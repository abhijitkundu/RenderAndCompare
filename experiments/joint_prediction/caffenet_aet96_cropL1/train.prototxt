name: "caffenet_aet96_cropSmoothL1"
layer {
  name: "data"
  type: "Python"
  top: "data"
  top: "gt_vp_azimuth"
  top: "gt_vp_elevation"
  top: "gt_vp_tilt"
  top: "gt_vp_distance"
  top: "gt_bbx_amodal"
  top: "gt_bbx_crop"
  python_param {
    module: "RenderAndCompare.layers"
    layer: "DataLayer"
    param_str: "-b 256 -wh 227 227 -m 104.00698793  116.66876762  122.67891434"
  }
}
layer {
  name: "silence_layer"
  type: "Silence"
  bottom: "gt_vp_distance"
}

layer {
  name:"azimuth_quantizer"
  type: "Python"
  bottom: "gt_vp_azimuth"
  top: "gt_vp_azimuth_label"
  python_param {
    module: "RenderAndCompare.layers"
    layer: "QuantizeViewPoint"
    param_str: "--num_of_bins 96"
  }
}

layer {
  name:"elevation_quantizer"
  type: "Python"
  bottom: "gt_vp_elevation"
  top: "gt_vp_elevation_label"
  python_param {
    module: "RenderAndCompare.layers"
    layer: "QuantizeViewPoint"
    param_str: "--num_of_bins 96"
  }
}

layer {
  name:"tilt_quantizer"
  type: "Python"
  bottom: "gt_vp_tilt"
  top: "gt_vp_tilt_label"
  python_param {
    module: "RenderAndCompare.layers"
    layer: "QuantizeViewPoint"
    param_str: "--num_of_bins 96"
  }
}

layer {
  name: "create_crop_offset_targets"
  type: "Python"
  bottom: "gt_bbx_amodal"
  bottom: "gt_bbx_crop"
  top: "gt_position_offset"
  top: "gt_size_offset"
  python_param {
    module: "RenderAndCompare.layers"
    layer: "GenerateBoxOffsetTargets"
  }
}

#------------- caffenet --------------#

layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 96
    kernel_size: 11
    stride: 4
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "norm1"
  type: "LRN"
  bottom: "pool1"
  top: "norm1"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "norm1"
  top: "conv2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 2
    kernel_size: 5
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "norm2"
  type: "LRN"
  bottom: "pool2"
  top: "norm2"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "norm2"
  top: "conv3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "conv3"
  top: "conv3"
}
layer {
  name: "conv4"
  type: "Convolution"
  bottom: "conv3"
  top: "conv4"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu4"
  type: "ReLU"
  bottom: "conv4"
  top: "conv4"
}
layer {
  name: "conv5"
  type: "Convolution"
  bottom: "conv4"
  top: "conv5"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu5"
  type: "ReLU"
  bottom: "conv5"
  top: "conv5"
}
layer {
  name: "pool5"
  type: "Pooling"
  bottom: "conv5"
  top: "pool5"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "fc6"
  type: "InnerProduct"
  bottom: "pool5"
  top: "fc6"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "fc6"
  top: "fc6"
}
layer {
  name: "drop6"
  type: "Dropout"
  bottom: "fc6"
  top: "fc6"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7"
  type: "InnerProduct"
  bottom: "fc6"
  top: "fc7"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu7"
  type: "ReLU"
  bottom: "fc7"
  top: "fc7"
}
layer {
  name: "drop7"
  type: "Dropout"
  bottom: "fc7"
  top: "fc7"
  dropout_param {
    dropout_ratio: 0.5
  }
}

#-------------- Loss/Output Layers -------------#
#-------------- Azimuth -------------#
layer {
  name: "fc_azimuth96"
  type: "InnerProduct"
  bottom: "fc7"
  top: "fc_azimuth96"
  param {
    lr_mult: 2
  }
  param {
    lr_mult: 4
  }
  inner_product_param {
    num_output: 96
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "accuracy_azimuth"
  type: "Accuracy"
  bottom: "fc_azimuth96"
  bottom: "gt_vp_azimuth_label"
  top: "accuracy_azimuth"
}
layer {
  name: "loss_azimuth"
  type: "SoftmaxWithLoss"
  bottom: "fc_azimuth96"
  bottom: "gt_vp_azimuth_label"
  top: "loss_azimuth"
  loss_weight: 1
}

#-------------- Elevation -------------#
layer {
  name: "fc_elevation96"
  type: "InnerProduct"
  bottom: "fc7"
  top: "fc_elevation96"
  param {
    lr_mult: 2
  }
  param {
    lr_mult: 4
  }
  inner_product_param {
    num_output: 96
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "accuracy_elevation"
  type: "Accuracy"
  bottom: "fc_elevation96"
  bottom: "gt_vp_elevation_label"
  top: "accuracy_elevation"
}
layer {
  name: "loss_elevation"
  type: "SoftmaxWithLoss"
  bottom: "fc_elevation96"
  bottom: "gt_vp_elevation_label"
  top: "loss_elevation"
  loss_weight: 1
}

#-------------- tilt -------------#
layer {
  name: "fc_tilt96"
  type: "InnerProduct"
  bottom: "fc7"
  top: "fc_tilt96"
  param {
    lr_mult: 2
  }
  param {
    lr_mult: 4
  }
  inner_product_param {
    num_output: 96
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "accuracy_tilt"
  type: "Accuracy"
  bottom: "fc_tilt96"
  bottom: "gt_vp_tilt_label"
  top: "accuracy_tilt"
}
layer {
  name: "loss_tilt"
  type: "SoftmaxWithLoss"
  bottom: "fc_tilt96"
  bottom: "gt_vp_tilt_label"
  top: "loss_tilt"
  loss_weight: 1
}

#-------------- crop -------------#

layer {
  name: "fc_position_offset"
  type: "InnerProduct"
  bottom: "fc7"
  top: "pred_position_offset"
  param {
    lr_mult: 2
  }
  param {
    lr_mult: 4
  }
  inner_product_param {
    num_output: 2
    weight_filler {
      type: "gaussian"
      std: 0.001
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "loss_position_offset"
  type: "L1Loss"
  bottom: "pred_position_offset"
  bottom: "gt_position_offset"
  propagate_down: true
  propagate_down: false
  top: "loss_position_offset"
  loss_weight: 1
}


layer {
  name: "fc_size_offset"
  type: "InnerProduct"
  bottom: "fc7"
  top: "pred_size_offset"
  param {
    lr_mult: 2
  }
  param {
    lr_mult: 4
  }
  inner_product_param {
    num_output: 2
    weight_filler {
      type: "gaussian"
      std: 0.001
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}

layer {
  name: "loss_size_offset"
  type: "L1Loss"
  bottom: "pred_size_offset"
  bottom: "gt_size_offset"
  propagate_down: true
  propagate_down: false
  top: "loss_size_offset"
  loss_weight: 1
}


layer {
  name: "create_amodal_from_crop_offsets"
  type: "Python"
  bottom: "pred_position_offset"
  bottom: "pred_size_offset"
  bottom: "gt_bbx_crop"
  top: "pred_bbx_amodal"
  python_param {
    module: "RenderAndCompare.layers"
    layer: "InvertBoxOffsetTargets"
  }
}

layer {
  name: "accuracy_box_overlap"
  type: "Python"
  bottom: "pred_bbx_amodal"
  bottom: "gt_bbx_amodal"
  top: "accuracy_box_overlap"
  python_param {
    module: "RenderAndCompare.layers"
    layer: "AverageBoxOverlapIoU"
  }
}